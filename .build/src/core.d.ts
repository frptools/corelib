import { CurriedFunction2, CurriedFunction2n, CurriedFunction3, CurriedFunction4n } from './curry';
export declare const compose: (...fns: Function[]) => (...args: any[]) => any;
export declare const pipe: (...fns: Function[]) => (...args: any[]) => any;
export declare const converge: (f: Function, ...fns: Function[]) => (x: any) => any;
export declare const spread: (f: Function, ...fns: Function[]) => (...x: any[]) => any;
export declare const spreadLeft: (f: Function, ...fns: Function[]) => (...x: any[]) => any;
export declare const applyUsing: CurriedFunction2<Function, any, any>;
export declare const flip: CurriedFunction3<Function, any, any, any>;
export declare const ifElse: CurriedFunction4n<Function, Function, Function, any, any>;
export declare const negate: CurriedFunction2<Function, any, boolean>;
export declare const equals: CurriedFunction2<any, any, boolean>;
export declare const or: CurriedFunction3<Function, Function, any, any>;
export declare const and: CurriedFunction3<Function, Function, any, any>;
export declare const any: (...fns: Function[]) => (x: any) => boolean;
export declare const mapIf: CurriedFunction3<Function, Function, any, any>;
export declare const mapUnless: CurriedFunction3<Function, Function, any, any>;
export declare const map: CurriedFunction2<Function, any, any>;
export declare const defaultUsing: CurriedFunction2<Function, any, any>;
export declare const defaultIfUndefined: CurriedFunction2<any, any, any>;
export declare const defaultIfNothing: CurriedFunction2<any, any, any>;
export declare const defaultIfNull: CurriedFunction2<any, any, any>;
export declare const defaultIf: CurriedFunction3<(x: any) => any, any, any, any>;
export declare const defaultUnless: CurriedFunction3<Function, any, any, any>;
export declare const valueOrDefault: CurriedFunction2<any, any, any>;
export declare const undefinedIfNull: (b: any) => any;
export declare const identity: (x: any) => any;
export declare const noop: (...args: any[]) => void;
export declare const constant: (x: any) => () => any;
export declare const nothing: () => any;
export declare const tap: (f: Function) => (x: any) => any;
export declare const throwError: (s?: string) => never;
export declare const throwNotImplemented: (s: string) => never;
export declare const throwNotSupported: (s: string) => never;
export declare const throwInvalidOperation: (s: string) => never;
export declare const throwMissing: (name: string, message?: string | undefined) => never;
export declare const throwArgumentError: (name: string, message?: string | undefined) => never;
export declare const error: (s: string) => () => never;
export declare const notImplemented: (s: string) => () => never;
export declare const notSupported: (s: string) => () => never;
export declare const invalidOperation: (s: string) => () => never;
export declare const missing: (name: string, message?: string | undefined) => () => never;
export declare const argumentError: (name: string, message?: string | undefined) => () => never;
export declare const getArg: (i: number) => () => any;
export declare const argsToArray: (...args: any[]) => any[];
export declare const mapApply: (f: Function, g: Function) => (...args: any[]) => any;
export declare const invoker: (f: Function, ...a: any[]) => (...b: any[]) => any;
export declare const invokeWithArgs: (...args: any[]) => (f: Function) => any;
export declare const invokeMethod: (key: any) => (target: any) => any;
export declare const invokeMethodWithArgs: CurriedFunction2n<any, any, (target: any) => any>;
export declare const assoc: CurriedFunction3<any, any, any, any>;
export declare const objectOf: CurriedFunction2<any, any, {
    [x: number]: any;
}>;
export declare const construct: CurriedFunction2n<new () => any, any, any>;
export declare const mapProps: CurriedFunction2<Function, any, any[]>;
export declare const mapObject: CurriedFunction2<Function, any, any>;
export declare const toPairs: (o: any) => any[][];
export declare const get: CurriedFunction2<any, any, any>;
export declare const has: CurriedFunction2<any, any, boolean>;
export declare const maybeGet: CurriedFunction2<any, any, any>;
export declare const getFrom: CurriedFunction2<any, any, any>;
export declare const valueOf: <A>(value: A | null | undefined) => Object | null | undefined;
export declare const substr: (from: number, length?: number | undefined) => (s: string) => string;
