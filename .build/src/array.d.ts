import { EqualityFn, MapFn } from './types';
export declare function arraysEqual<A>(a: A[]): (b: A[]) => boolean;
export declare function arraysEqual<A>(a: A[], b: A[]): boolean;
export declare function arraysEqual<A>(equals: EqualityFn<A>): (a: A[], b: A[]) => boolean;
export declare function arraysEqual<A>(equals: EqualityFn<A>, a: A[]): (b: A[]) => boolean;
export declare function arraysEqual<A>(equals: EqualityFn<A>, a: A[], b: A[]): boolean;
export declare function arraysEqualStartCount<A>(a: A[]): (b: A[]) => number;
export declare function arraysEqualStartCount<A>(a: A[], b: A[]): number;
export declare function arraysEqualStartCount<A>(equals: EqualityFn<A>): (a: A[], b: A[]) => number;
export declare function arraysEqualStartCount<A>(equals: EqualityFn<A>, a: A[]): (b: A[]) => number;
export declare function arraysEqualStartCount<A>(equals: EqualityFn<A>, a: A[], b: A[]): number;
export declare function copyArrayShallow<A = any>(values: A[]): any[];
export declare function concatArray<A = any>(left: A[], right: A[]): any[];
export declare function withArrayIndexUpdated<A = any>(index: number, value: A, array: A[]): any[];
export declare function withArrayIndexRemoved<A = any>(index: number, array: A[]): any[];
export declare function withArrayIndexInserted<A = any>(index: number, value: A, array: A[]): any[];
export declare function withArrayElementAppended<A = any>(value: A, array: A[]): any[];
export declare function withArrayElementPrepended<A = any>(value: A, array: A[]): any[];
export declare function writeArrayElementsUsing<A = any, B = any>(mapFn: MapFn<A, B>, sourceValues: A[], targetValues: B[], sourceIndex: number, targetIndex: number, count: number): void;
export declare function writeArrayElementsUsing<A = any>(mapFn: MapFn<A, A>, sourceValues: A[], targetValues: A[], sourceIndex: number, targetIndex: number, count: number): void;
export declare function writeArrayElements<A = any>(source: A[], destination: A[], sourceIndex: number, destinationIndex: number, count: number): void;
export declare function skipArrayStart<A = any>(count: number, values: A[]): A[];
export declare function takeArrayStart<A = any>(count: number, values: A[]): A[];
export declare function firstArrayElement<A = any>(values: A[]): A;
export declare function lastArrayElement<A = any>(values: A[]): A;
export declare function lastArrayIndex<A = any>(values: A[]): number;
export declare function asArray<A = any>(value: A | A[]): A[];
export declare function toArray<A = any>(value: A): A[];
export declare function partitionArray(f: Function, arr: any[]): any;
export declare function partitionArrayAtIndex<A>(index: number, array: A[]): [A[], A[]];
export declare function removeFromUnsortedArray<A>(predicate: (a: A) => boolean, array: A[]): boolean;
